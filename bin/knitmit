#!/usr/bin/env bash

#  Copyright 2012-2025 Stanislav Senotrusov
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Exit immediately if an unset variable is referenced
set -o nounset

# ## `fail`
#
# Terminates the script with an error message and a stack trace.
#
# ### Usage
#
# fail <message>...
#
# Arguments:
#   <message>...  Error message to display, composed from all remaining arguments.
#
# ### Examples
#
# fail "Critical failure." "Shutting down."
#
fail() {
  softfail --from-fail-wrapper "$@"
  exit 1
}

# ## `softfail`
#
# Prints an error message and stack trace without terminating the script.
#
# ### Usage
#
# softfail [OPTIONS...] <message>...
#
# Options:
#   --from-fail-wrapper   Adjusts the stack trace level when called from `fail`.
#
# Arguments:
#   <message>...  Error message to display, composed from all remaining arguments.
#
# ### Examples
#
# softfail "An unexpected error occurred."
# softfail --from-fail-wrapper "This message was passed" "through the fail function."
#
softfail() {
  local i trace_start=1 # Stack trace starts at this level

  if [ "${1:-}" = "--from-fail-wrapper" ]; then
    shift
    trace_start=2
  fi

  # Display the error message and any additional arguments to stderr
  echo "${1:-"An error occurred; refer to the stack trace for context."}" "${@:2}" >&2

  # Provide a stack trace of function calls
  for (( i=trace_start; i <= ${#BASH_LINENO[@]}-1; i++ )); do
    echo "    at ${FUNCNAME[i]} (${BASH_SOURCE[i]}:${BASH_LINENO[i-1]})" >&2
  done

  return 1
}

# ## `grep::filter`
#
# Filters out lines that match the specified patterns using `grep`.
# If no lines are found, it exits with status 0 without triggering an error.
#
# ### Usage
#
# grep::filter ARGUMENTS...
#
# Arguments:
#   ARGUMENTS...  Any valid `grep` arguments or options.
#
# ### Examples
#
# grep::filter -E "DEBUG|TRACE" file1.log file2.log
#
grep::filter () {
  grep -v "$@" || [ $? = 1 ]
}

# ## `platform::config_home`
#
# Determines the platform-specific configuration home directory.
#
# This function checks the `OSTYPE` environment variable to identify the
# operating system and then outputs the conventional path for user-specific
# application configuration files. It supports Linux, macOS, and
# Windows.
#
# ### Usage
#
# platform::config_home
#
platform::config_home() {
  # Determine configuration directory based on the operating system type
  case "${OSTYPE}" in
    linux*)
      # For Linux, use XDG_CONFIG_HOME or default to ~/.config
      echo "${XDG_CONFIG_HOME:-"${HOME}/.config"}"
      ;;
    darwin*)
      # For macOS, use ~/Library/Application Support
      echo "${HOME}/Library/Application Support"
      ;;
    msys*|cygwin*)
      # For Windows, use APPDATA
      echo "${APPDATA}"
      ;;
    *)
      # If the platform is not recognized, report a soft failure
      softfail "The operating system platform is not supported."
      return 1
      ;;
  esac
}

# ## `platform::copy_to_clipboard`
#
# Copies standard input to the system clipboard.
#
# This function attempts to use various clipboard tools (wl-copy, xclip,
# pbcopy) in a preferred order. If none of these tools are available,
# it prints the input to standard output as a fallback.
#
# ### Usage
#
# platform::copy_to_clipboard
#
platform::copy_to_clipboard() {
  # Attempt to use wl-copy (Wayland-based Linux) if available
  if command -v wl-copy >/dev/null 2>&1; then
    wl-copy || softfail "Could not access the clipboard using wl-copy." || return 1

  # Else, attempt to use xclip (X11-based Linux) if available
  elif command -v xclip >/dev/null 2>&1; then
    xclip -selection clipboard || softfail "Could not access the clipboard using xclip." || return 1

  # Else, attempt to use pbcopy (macOS) if available
  elif command -v pbcopy >/dev/null 2>&1; then
    pbcopy || softfail "Could not access the clipboard using pbcopy." || return 1
  
  # Attempt to use clip (Windows) if available
  elif command -v clip >/dev/null 2>&1; then
    clip || softfail "Could not access the clipboard using clip." || return 1

  # If no clipboard tool is found, print to standard output
  else
    echo "No clipboard tool was found. Printing to standard output instead:" >&2
    cat || softfail "Failed to read from stdin." || return 1
    
    # This is not necessarily an error since the data was displayed
    return
  fi

  # Notify the user of the successful operation
  echo "Copied to clipboard." >&2
}

# ## `shell::argument_exists`
#
# Checks if a specific argument is present in a list of provided arguments.
#
# This function iterates over a list of arguments starting from the second
# parameter and checks if any of them match the first parameter.
#
# ### Usage
#
# shell::argument_exists <argument-to-find> [<arguments-to-search-in>...]
#
# Arguments:
#   <argument-to-find>        The argument to search for in the list
#   [<arguments-to-search-in>...] A space-separated list of arguments to search within
#
# ### Examples
#
# shell::argument_exists "--help" "--help" "-v" "--config"
# shell::argument_exists "test" "run" "build" "test"
#
shell::argument_exists() {
  local arg
  # Iterate over arguments starting from the second one
  for arg in "${@:2}"; do
    # Check if the current argument matches the search target
    [ "${arg}" = "$1" ] && return 0
  done
  # If no match is found after checking all arguments, return 1 (false)
  return 1
}

# ## `shell::is_pipe_good`
#
# Checks if all components of a pipeline completed successfully.
#
# This function verifies the exit status of each command in a pipeline
# using the `PIPESTATUS` array. It returns true (0) if all commands
# succeeded, and false (1) otherwise.
#
# ### Usage
#
# shell::is_pipe_good
#
shell::is_pipe_good () {
  ! [[ "${PIPESTATUS[*]}" =~ [^[:space:]0] ]]
}

# ## `query::gemini::is_configured`
#
# Checks if the Gemini API key is configured in the environment.
#
# This function verifies the presence of the `GEMINI_API_KEY` environment variable, indicating that 
# the Gemini API is configured and ready for use.
#
# ### Usage
#
# query::gemini::is_configured
#
query::gemini::is_configured() {
  # Check if the Gemini API key is set in the environment
  [ -n "${GEMINI_API_KEY:-}" ]
}

# ## `query::gemini`
#
# Send a prompt to the Gemini language model API and retrieve the plain-text response.
#
# This function reads a prompt from `stdin`, wraps it in a JSON payload, calls the specified
# model with `curl`, then pipes the result through `jq` to pull out the generated text.
#
# ### Usage
#
# query::gemini <model-name>
#
# Arguments:
#   <model-name>  The specific model identifier.
#                 If not provided, defaults to `gemini-2.0-flash`.
#
# Available model names can be found at: https://ai.google.dev/gemini-api/docs/models
#
# ### Examples
#
# echo "Do yesternights linger in dreamworn veils?" | query::gemini gemini-2.0-flash
#
query::gemini() {
  # Assign the model name provided as an argument or use the default
  local model_name="${1:-"gemini-2.0-flash"}"

  # Declare local variables
  local input_text_json
  local response_body

  # Check if the Gemini API key is set in the environment
  if [ -z "${GEMINI_API_KEY:-}" ]; then
    echo "The GEMINI_API_KEY environment variable is not set. Please configure it before querying the model." >&2
    return 1
  fi

  # Prepare the input text as a JSON string using jq.
  # This handles special characters and ensures proper formatting.
  input_text_json=$(jq --exit-status --ascii-output --raw-input --slurp .) ||
    softfail "Failed to convert the input text to JSON format using 'jq'." || return 1

  # Notify the user about the model being queried
  echo "Sending request to the language model '${model_name}'..." >&2

  # Send the request to the Gemini language model API using curl.
  # Capture the response for further processing and check the exit status of the curl command.
  if response_body="$(curl "https://generativelanguage.googleapis.com/v1beta/models/${model_name}:generateContent?key=${GEMINI_API_KEY}" \
    --request POST \
    --header 'Content-Type: application/json' \
    --data @- <<<'{"contents": [{"role": "user", "parts":[{"text": '"${input_text_json}"'}]}]}' \
    --fail-with-body \
    --show-error \
    --silent)"
  then
    # If the request is successful, extract the plain-text content from the response
    jq --exit-status --raw-output '.candidates[].content.parts[].text' <<<"${response_body}" ||
      softfail "Failed to extract the content from the response for model '${model_name}'." || return 1
  else
    # If the request fails, inform the user
    echo "Could not retrieve a response from the language model '${model_name}'." >&2

    # Try to parse and display the specific error message returned by the API
    jq --exit-status --raw-output '.error.message' <<<"${response_body}" >&2 ||
      softfail "Failed to parse the error response from the language model '${model_name}'." || return 1

    # Return a non-zero status code to indicate failure
    return 1
  fi
}

# ## `knitmit::query_models`
#
# Queries a list of model preferences from the configuration JSON and attempts to return a response.
#
# This function retrieves a list of preferred model commands from the configuration, checks their availability
# and configuration, and invokes them in order until one returns a successful response. If no suitable model
# command succeeds, the function reports all encountered issues and returns a failure status.
#
# ### Usage
#
# knitmit::query_models <model-prompt>
#
# Arguments:
#   <model-prompt>  The prompt string to send to each model command
#
# ### Examples
#
# knitmit::query_models "Summarize the following..."
#
knitmit::query_models() {
  local command_array
  local command_response
  local command_string
  local item_json
  local items_array
  local items_lines
  local report_line
  local report_queue=()

  local model_prompt="$1"

  # Extract the list of model preferences from the configuration JSON
  items_lines="$(jq --exit-status --compact-output '.model_preferences[]' <<<"${CONFIG_JSON}")" ||
    fail "Failed to extract model preferences from the configuration."

  # Read the list of models into an array
  readarray -t items_array <<<"${items_lines}" ||
    fail "Failed to read model preferences into an array."

  # Iterate over each model preference
  for item_json in "${items_array[@]}"; do
    # Convert the JSON array to a shell-compatible string representation
    command_string="$(jq --exit-status --raw-output '. | @sh' <<<"${item_json}")" ||
      fail "Failed to process model preference item into a shell-compatible string."

    # Expand the command string into an array
    eval "command_array=(${command_string})" ||
      fail "Failed to convert model preference item to a command array."

    # Verify if the command exists before attempting to run it
    if ! command -v "${command_array[0]}" >/dev/null; then
      if config::is_enabled report_unavailable_models; then
        echo "The command specified in the model preferences list is not available: ${command_array[*]}" >&2
      else
        report_queue+=("The command specified in the model preferences list is not available: ${command_array[*]}")
      fi
      # Skip the rest of the loop and proceed with the next iteration
      continue
    fi

    # Check if the '<command>::is_configured' function exists in the current environment
    if declare -F "${command_array[0]}::is_configured" > /dev/null; then
      # If the function exists, invoke it to check if the command is configured properly
      if ! "${command_array[0]}::is_configured"; then
        # If the command is not configured and reporting is enabled, display a message
        if config::is_enabled report_unavailable_models; then
          echo "The query endpoint is listed in the model preferences list but is not configured: ${command_array[*]}" >&2
        else
          report_queue+=("The query endpoint is listed in the model preferences list but is not configured: ${command_array[*]}")
        fi
        # Skip the rest of the loop and proceed with the next iteration
        continue
      fi
    fi
    
    # Log the language model command invocation if it is not a shell function
    if ! declare -F "${command_array[0]}" > /dev/null; then
      echo "Invoking the language model command: \`${command_array[*]}\`..." >&2
    fi

    # Run the model command with the provided prompt and capture the command response
    if ! command_response="$("${command_array[@]}" <<<"${model_prompt}")"; then
      echo "Model command failed with a non-zero exit status: ${command_array[*]}" >&2
      # Skip the rest of the loop and proceed with the next iteration
      continue
    fi

    # Output the command response and exit the loop
    echo "${command_response}"
    return
  done

  if [ ${#report_queue[@]} -gt 0 ]; then
    # Inform the user that additional issues were reported during the model querying process
    echo "During model querying, the following was reported:" >&2

    # Loop through the deferred report array and display each line
    for report_line in "${report_queue[@]}"; do
      echo "${report_line}" >&2
    done
  fi

  # If no model succeeded, return with failure status
  return 1
}

# ## `knitmit::message_rules`
#
# Print commit message generation rules for use with diffs.
#
# Outputs guidelines for writing clear, structured commit messages, including summary,
# body formatting, and tone principles. This content is written directly to standard output.
#
# ### Usage
#
# knitmit::message_rules
#
knitmit::message_rules() {
    cat <<'EOF' || fail "Failed to output the commit message generation rules."
You are an AI assistant tasked with generating a commit message.

Produce a commit message by synthesizing information from the provided diff and recent commit history. Follow these rules precisely:

1. Input context rules

* The diff is the authoritative source for understanding *what* technical changes were made and their direct implications. It should also be treated as the primary basis for inferring the *why* - the rationale and intent - behind those changes.
* Use the recent commit history as an auxiliary reference to help enrich or validate the *why* - such as clarifying whether the change supports a larger feature, continues or adjusts a previously introduced change, or contributes to an ongoing refactoring effort.
* Draw inspiration from recent commits to maintain consistency in terminology, tone, and level of detail, but avoid imitating them verbatim.
* If the *why* is not immediately obvious from the diff or history, prioritize a clear description of *what* was done and state any assumed intent cautiously, if at all. If the *why* is uncertain or highly speculative, omit it.

2. Commit message requirements:

* The commit message must clearly communicate both the *what* - the technical changes made - and the *why* - the rationale or intent behind them.
* The message must begin with a summary line, followed by an optional commit body.
* The summary line must not exceed 50 characters. If that limit prevents you from clearly conveying the *what* and *why*, include a commit body.
* If the initial generated summary exceeds 50 characters but contains both *what* and *why*, first attempt to rephrase it more concisely without losing essential information. If still too long or clarity is compromised, then generate a body.
* If a commit body is used, it must be separated from the summary line by exactly one blank line.
* Use clear, concise, and consistent professional language.
* Avoid vague terms, filler words, and redundancy.
* Prefer ASCII characters for English text. Avoid stylistic Unicode characters (e.g., curly quotes, en dashes, ellipses) when ASCII equivalents (e.g., straight quotes, hyphen-minus, three periods) are sufficient.

3. Summary line requirements:

* Must not exceed 50 characters.
* Must be a single, concise summary of the change, written in the imperative mood (e.g., "Fix bug in module", "Add new user authentication").
* Start with a capital letter, unless the line begins with a code fragment (e.g., a variable name, function name, literal value, or filename) that was originally lowercase. Preserve the original casing of code fragments based on the provided diff and recent commit history.
* Must be plain text - no Markdown formatting, list markers, or styling.
* Do not enclose code fragments in backticks in the summary line.
* Do not include a period at the end.
* No trailing whitespace.

4. Commit body:

If a commit body is included, it must follow these rules:

* The commit body should be written in plain text, using minimal Markdown-like features for structure. It may include paragraphs, blockquotes, lists (including nested ones), multi-line code blocks, and backticks - but must not include styling such as bold, italic, strikethrough, headings, or horizontal rules.
* Wrap all code fragments - such as variable names, function names, literal values, or filenames (e.g., `variableName`, `myFunction()`, `true`, `config.json`) - in backticks.
* Write URLs as plain text only, without any Markdown formatting (e.g., use `http://example.com`, not `[Example](http://example.com)` or `![image](http://example.com/image.png)`).
* Use triple backticks (```) for multi-line code blocks. You may optionally specify a language identifier after the opening backticks (e.g., ```ruby).
* Separate top-level elements — such as paragraphs, blockquotes, lists, and fenced (multi-line) code blocks — with exactly one blank line, no matter their order. Within a list, do not insert blank lines between list items or between elements (paragraphs, blockquotes, nested lists, and fenced (multi-line) code blocks) inside a list item. Treat the entire list as a single block.Example:
  ```
  Paragraph

  * 1st list item
    > Blockquote
    * Nested list item
  * 2nd list item

  Another paragraph

  > Blockquote
  ```
* Follow these formatting rules for lists:
  * Use `*` as the list marker character.
  * The list item text must begin immediately after the list marker (`*`) followed by EXACTLY ONE space. There should be NO additional spaces or indentation between the `* ` and the start of the item's text.
    * Correct: `* List item content`
    * Incorrect: `*  List item content` (two spaces after `*`)
    * Incorrect: `*   List item content` (three spaces after `*`)
  * Do not include blank lines between list items.
  * When a list item's text wraps to subsequent lines, these wrapped lines must be indented to align vertically with the first character of the text on the first line of that list item.
  * Use this indentation scheme for nested lists:
    * Top-level list items have no indentation (zero spaces) *before* the `*` list marker.
    * Each subsequent nesting level adds exactly two spaces of indentation *before* the `*` list marker.
    * Example demonstrating correct marker spacing, wrapped line alignment, and nesting:
      ```
      * This is a top-level list item where the text starts
        immediately after the marker and one space. Wrapped lines
        align with 'This'.
        * This is a nested list item, indented by two spaces
          before the asterisk. Its text also starts right after
          the marker and one space, and its wrapped lines align
          with 'This'.
        * Another nested item.
      * Another top-level item.
      ```
* Wrap lines at natural word boundaries so they don't exceed 72 characters. This 72-character limit includes all characters, including leading spaces for indentation, list markers, and the space after the list marker.
* Do not break uninterrupted strings like URLs or long identifiers.
* If such a string cannot be wrapped, place it on its own line - it's okay if that line exceeds 72 characters.
* Example of a long string on its own line within a list:
  ```
  * See documentation at
    http://example.com/this/is/a/very/very/long/url/that/cannot/be/broken/sensibly
  ```

5. Output format rules

* Return only the formatted commit message.
* Do not include any commentary, headings, or explanatory text before or after the commit message.
EOF

# Recent commit history:

# --- BEGIN RECENT COMMIT HISTORY ---
# --- END RECENT COMMIT HISTORY ---

# Diff:

# --- BEGIN DIFF ---
# --- END DIFF ---
}

# ## `knitmit::make_prompt`
#
# Generates a structured prompt for a commit message based on Git changes.
#
# This function creates a detailed prompt by analyzing staged Git changes
# (diff) and recent commit history. If the "short" keyword is provided as an
# argument, it generates a more concise prompt using a minimal diff.
#
# ### Usage
#
# knitmit::make_prompt [<keyword>]
#
# Arguments:
#   [<keyword>]  Optional keyword. If "short", generates a prompt with
#                minimal diff context. Otherwise, a more detailed diff
#                and recent commit history are included.
#
# ### Examples
#
# knitmit::make_prompt
# knitmit::make_prompt short
#
knitmit::make_prompt() {
  local commit_rules_path context_messages=12

  # If the "short" keyword is provided, reduce the number of context messages
  if shell::argument_exists short "$@"; then
    context_messages=4
  fi

  # Retrieve the path to the message rules file
  commit_rules_path="$(platform::config_home)/knitmit-message-rules.txt" ||
    fail "Failed to determine the configuration path."

  # Output commit message rules from file if present; fallback to built-in rules
  if [ -f "${commit_rules_path}" ]; then
    cat "${commit_rules_path}" || fail "Failed to read the message rules file."
  else
    knitmit::message_rules || fail "Could not output the default commit message generation rules."
  fi
  
  # Check if the current directory is a Git repository with at least one commit
  if git rev-parse --verify HEAD >/dev/null 2>&1; then
    echo ""
    echo "Recent Commit History:"
    echo ""
    echo "--- BEGIN RECENT COMMIT HISTORY ---"

    # Append the last ${context_messages} commit messages.
    # Filter out "Signed-off-by" lines and remove excessive blank lines.
    # Here, `sed` is used to collapse multiple consecutive blank lines into a single blank line.
    git log -n "${context_messages}" --pretty=format:"%B" |
      grep::filter "^Signed-off-by:" |
      sed '/^$/N;/^\n$/D'

    # Verify that the pipe operation was successful
    shell::is_pipe_good || fail "Could not retrieve or process commit messages."

    # Close the commit history section
    echo "--- END RECENT COMMIT HISTORY ---"
  fi

  echo ""
  echo "Diff:"
  echo ""
  echo "--- BEGIN DIFF ---"

  # Append the diff of staged changes to the prompt
  if shell::argument_exists short "$@"; then
    # Use a minimal diff if 'short' argument is provided
    git diff --diff-algorithm=minimal --no-color --cached ||
      fail "Could not generate a minimal diff."

    echo "A short prompt was generated." >&2
  else
    # Otherwise, use a more detailed histogram diff with function context
    git diff --diff-algorithm=histogram --no-color --cached --function-context -U15 ||
      fail "Could not generate a detailed diff."
  fi

  # Close the diff section
  echo "--- END DIFF ---"
}

# ## `knitmit::filter_result`
#
# Applies configured filter commands to the input string and echoes the final result.
#
# The function reads the `result_filters` array from `${CONFIG_JSON}`, verifies each command, and
# invokes them in order. Every filter reads the current data from standard input and passes its
# output to the next filter. Missing or failing filters are skipped. After all filters have run,
# the resulting string is written to standard output.
#
# ### Usage
#
# knitmit::filter_result <input-data>
#
# Arguments:
#   <input-data>  The initial text to process through the configured result filters
#
# ### Examples
#
# knitmit::filter_result "Raw response from the model"
#
knitmit::filter_result() {
  local command_array
  local command_response
  local command_string
  local item_json
  local items_array
  local items_lines

  local input_data="$1"

  # Extract the list of filters from the configuration JSON
  items_lines="$(jq --exit-status --compact-output '.result_filters[]' <<<"${CONFIG_JSON}")" ||
    fail "Failed to extract filters from the configuration."

  # Read the list of filters into an array
  readarray -t items_array <<<"${items_lines}" ||
    fail "Failed to read filters into an array."

  # Iterate over each filter command
  for item_json in "${items_array[@]}"; do
    # Convert the JSON array to a shell-compatible string representation
    command_string="$(jq --exit-status --raw-output '. | @sh' <<<"${item_json}")" ||
      fail "Failed to process filter item into a shell-compatible string."

    # Expand the command string into an array
    eval "command_array=(${command_string})" ||
      fail "Failed to convert filter item to a command array."

    # Verify if the command exists before attempting to run it
    if ! command -v "${command_array[0]}" >/dev/null; then
      if config::is_enabled report_unavailable_filters; then
        echo "The command specified in the filters list is not available: ${command_array[*]}" >&2
      fi
      # Skip the rest of the loop and proceed with the next iteration
      continue
    fi

    # Log the filter command invocation if it is not a shell function
    if ! declare -F "${command_array[0]}" > /dev/null; then
      echo "Invoking the filter command: \`${command_array[*]}\`..." >&2
    fi

    # Run the command with the current data and capture its response
    if ! command_response="$("${command_array[@]}" <<<"${input_data}")"; then
      echo "The command returned a non-zero exit status: ${command_array[*]}" >&2
      # Skip the rest of the loop and proceed with the next iteration
      continue
    fi

    # Update the input for the next filter
    input_data="${command_response}"
  done

  # Output the final filtered result
  echo "${input_data}"
  return
}

# ## `config::get`
#
# Retrieves a value from the configuration for the specified key.
#
# This function fetches the value associated with the specified key from the JSON configuration.
#
# ### Usage
#
# config::get <key>
#
# Arguments:
#   <key>  The configuration key to retrieve.
#
# ### Examples
#
# config::get "some_value"
#
config::get() {
  local key="$1"

  # Retrieve the value from the configuration JSON
  jq --raw-output ".${key}" <<<"${CONFIG_JSON}" ||
    fail "Could not retrieve the '${key}' setting from the configuration."
}

# ## `config::is_enabled`
#
# Checks if a given configuration key is enabled.
#
# This function retrieves a boolean value for the specified configuration key from the JSON configuration.
#
# ### Usage
#
# config::is_enabled <key>
#
# Arguments:
#   <key>  The configuration key to check.
#
# ### Examples
#
# config::is_enabled "feature_enabled"
#
config::is_enabled() {
  local key="$1"
  local value

  # Retrieve the value from the configuration JSON. If not found, use the default value
  value="$(jq --raw-output ".${key}" <<<"${CONFIG_JSON}")" ||
    fail "Could not retrieve the '${key}' setting from the configuration."

  # Return true if the value is explicitly true
  [ "${value}" = true ]
}

# ## `config::load`
#
# Load configuration from a JSON file or fall back to default settings.
#
# This function attempts to locate and read the configuration file from the platform's config
# directory. If the file is not present, it falls back to using the built-in default configuration.
# When a file is present, it merges its contents with the default configuration, filtering out
# commented lines for clean parsing.
#
# ### Usage
#
# config::load
#
config::load() {
  local default_config config_path user_config

  # Initialize default configuration content
  default_config="$(config::default)" ||
    fail "Failed to initialize the default configuration."

  # Determine the expected path to the configuration file
  config_path="$(platform::config_home)/knitmit.json" ||
    fail "Failed to determine the configuration path."

  # Check if the config file exists
  if [ -f "${config_path}" ]; then
    # Filter out lines that are commented and store clean user configuration
    user_config="$(grep::filter -E '^\s*//' "${config_path}")" ||
      fail "Failed to read the configuration file."

    # Merge default configuration with user-defined overrides
    jq --argjson default_config "${default_config}" \
       --argjson user_config "${user_config}" \
       '$default_config * $user_config' <<<'{}' ||
      fail "Failed to merge default and user configuration."
  else
    # If config file is not found, output default configuration
    echo "${default_config}"
  fi
}

# ## `config::default`
#
# Print the default configuration in JSON format.
#
# Outputs a static JSON configuration that defines default values for user options such as
# prompt behavior, model preferences, and command reporting. This function is used as a baseline
# setup for the script's behavior and may be redirected or parsed elsewhere.
#
# ### Usage
#
# config::default
#
config::default() {
  # Print the default configuration in JSON format
  cat <<JSON || fail "Failed to print the default configuration."
{
  "commit_with_template": true,
  "copy_prompt": false,
  "copy_result": false,
  "interactive_prompt_limit": 139000,
  "query_language_model": true,
  "report_unavailable_models": false,
  "report_unavailable_filters": false,
  "model_preferences": [
    ["query::gemini", "gemini-2.5-flash-preview-05-20"],
    ["query::gemini", "gemini-2.0-flash"],
    ["query::gemini", "gemini-2.0-flash-lite"],
    ["aichat"],
    ["llm"],
    ["sgpt"]
  ],
  "result_filters": [
    ["mdformat", "-"]
  ]
}
JSON
}

# ## `knitmit::main`
#
# Main script to handle configuration, prompt generation, and model querying.
#
# ### Usage
#
# knitmit::main [<arguments>...]
#
# Arguments:
#   prompt         Generate prompt and copy to clipboard. Skips model query.
#   result         Query the model and copy response to clipboard. No commit.
#   short          Use minimal diff to generate shorter prompt if needed.
#   message-rules  Output default commit message formatting rules.
#   help           Display help and exit.
#
# The arguments can be specified in any order.
#
# ### Examples
#
# knitmit::main prompt  
# knitmit::main result  
# knitmit::main short  
# knitmit::main short prompt  
# knitmit::main short result
#
# Requirements:
#   * Requires Git and must be run inside a Git repository.
#   * The GEMINI_API_KEY environment variable must be set to query the Gemini.
#
knitmit::main() {
  local CONFIG_JSON
  local interactive_prompt_limit
  local knitmit_result
  local model_response
  local model_prompt

  # Show help content if a help flag is provided
  if shell::argument_exists help "$@" ||
     shell::argument_exists --help "$@" ||
     shell::argument_exists -h "$@"
  then
    knitmit::display_help || softfail "Failed to display help information."
    return
  fi

  # Show commit message rules if the corresponding flag is provided
  if shell::argument_exists "message-rules" "$@"; then
    knitmit::message_rules || softfail "Failed to display commit message generation rules."
    return
  fi

  # Verify that the current directory is within a Git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>/dev/null; then
    echo "The current directory is not part of a Git repository." >&2
    return 1
  fi

  # Confirm that changes have been staged for commit
  if git diff --cached --quiet; then
    echo "No changes have been staged for commit." >&2
    return
  fi

  # Load the configuration
  CONFIG_JSON="$(config::load)" || fail "Failed to load the configuration."

  # Generate the prompt using the staged changes and commit history.
  # Pass all script arguments to knitmit::make_prompt for 'short' keyword detection.
  model_prompt="$(knitmit::make_prompt "$@")" || fail "Failed to generate the prompt."

  # Check whether to validate the length of an interactive prompt and provide feedback if it exceeds the configured limit.
  # This is triggered when either the 'copy_prompt' config is enabled or a 'prompt' argument is supplied.
  if config::is_enabled copy_prompt || shell::argument_exists prompt "$@"; then
    # Attempt to retrieve the 'interactive_prompt_limit' from the configuration
    interactive_prompt_limit="$(config::get interactive_prompt_limit)" ||
      fail "Failed to retrieve the 'interactive_prompt_limit' from the configuration."

    # Compare the prompt length to the interactive limit
    if (( "${#model_prompt}" > interactive_prompt_limit )); then
      if shell::argument_exists short "$@"; then
        # Notify the user that the prompt is still too long even with the 'short' flag
        echo "The prompt is still too long for interactive use, even with the 'short' argument." >&2
      else
        # Suggest using the 'short' flag to reduce prompt length
        echo "The prompt exceeds the maximum length for interactive use. Try the 'short' argument to reduce it:" >&2
        echo "  ${BASH_SOURCE[0]##*/} short" >&2
      fi
    fi
  fi

  # If 'prompt' argument is provided, handle its special behavior and return early.
  if shell::argument_exists prompt "$@"; then
    # If 'prompt' is provided and output is not a terminal, print the prompt and return early.
    if ! [ -t 1 ]; then
      echo "${model_prompt}"
      return
    fi

    # At this point, 'prompt' is provided AND output IS a terminal.
    # Copy the prompt to the clipboard.
    platform::copy_to_clipboard <<<"${model_prompt}" ||
      softfail "Could not copy the prompt to the clipboard."

    # The 'prompt' argument was provided; skip querying the language model and return.
    echo "The 'copy' argument was provided; skipping the query to the language model." >&2
    return
  fi

  # If 'prompt' was NOT provided (as the above block would have returned otherwise),
  # copy the prompt to the clipboard if:
  # - the 'copy_prompt' setting is enabled,
  # - the 'result' argument is not present, AND
  # - the output is a terminal (ensuring this only happens for interactive use).
  if config::is_enabled copy_prompt && ! shell::argument_exists result "$@" && [ -t 1 ]; then
    platform::copy_to_clipboard <<<"${model_prompt}" ||
      softfail "Could not copy the prompt to the clipboard."
  fi

  # Skip querying the language model if the configuration is disabled
  if ! config::is_enabled query_language_model; then
    echo "The 'query_language_model' setting is disabled; skipping the query to the language model." >&2
    return
  fi

  # Query available language models with the generated prompt
  model_response="$(knitmit::query_models "${model_prompt}")" || fail "Could not query any of the available language models."

  # Filter the response to extract the relevant result
  knitmit_result="$(knitmit::filter_result "${model_response}")" || fail "Failed to filter the model response."

  # If standard output is not a terminal, output the result and return
  if ! [ -t 1 ]; then
    echo "${knitmit_result}"
    return
  fi

  # If the 'result' argument is provided (and output is a terminal)
  if shell::argument_exists result "$@"; then
    # Copy the result to the clipboard and return
    platform::copy_to_clipboard <<<"${knitmit_result}" ||
      softfail "Could not copy the commit message to the clipboard."
    return
  fi

  # Copy the result to the clipboard if the setting is enabled
  if config::is_enabled copy_result; then
    platform::copy_to_clipboard <<<"${knitmit_result}" ||
      softfail "Could not copy the commit message to the clipboard."
  fi

  # Create a Git commit using the result when configured; otherwise display it
  if config::is_enabled commit_with_template; then
    echo "Creating a Git commit using the message generated by the language model as the template..." >&2
    git commit --template <(echo "${knitmit_result}") ||
      fail "Failed to create a commit with the provided template."
  else
    # Output the result without creating a Git commit
    echo "${knitmit_result}"
    return
  fi
}

# ## `knitmit::display_help`
#
# Displays the help message for the script.
#
# This function prints usage instructions, a description of the script,
# and details about available commands. It determines the script's name
# dynamically for use in the help text.
#
# ### Usage
#
# knitmit::display_help
#
knitmit::display_help() {
  cat <<EOF || fail "Could not output the data."
Usage: ${BASH_SOURCE[0]##*/} [COMMAND...]

Generates a commit message suggestion based on staged Git changes by
querying the Large Language Model (LLM).

The suggested message is then used to prepare a Git commit.

Commands:

  prompt         Generates the prompt and, if the output is a terminal,
                 copies it to the system clipboard, then exits. This option
                 bypasses querying the language model, allowing you to use the
                 prompt elsewhere or review it manually. If the output is not a
                 terminal, the prompt is printed to stdout instead.

  result         Queries the language model and, if the output is a terminal,
                 copies the response to the system clipboard without making a
                 Git commit. If the output is not a terminal, the response is
                 printed to stdout instead.

  short          Generates a more concise prompt. This involves using a minimal
                 diff of staged changes, which can be helpful if the default
                 prompt is too long for the language model's input limits.

  message-rules  Outputs the default rules used in the prompt for generating
                 commit messages. These include formatting guidelines
                 and writing standards, and can serve as a template
                 for creating a custom configuration file.

  help, -h, --help
                 Displays this help message and exits.

  The commands can be specified in any order.

Requirements:

* Requires Git and must be run inside a Git repository.
* The GEMINI_API_KEY environment variable must be set to query the Gemini.
EOF
}

# Call the main script
knitmit::main "$@"
